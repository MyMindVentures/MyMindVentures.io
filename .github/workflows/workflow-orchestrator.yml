name: ðŸ”„ Workflow Orchestrator

on:
  # Manual trigger
  workflow_dispatch:
    inputs:
      trigger_type:
        description: 'Type of workflow trigger'
        required: true
        default: 'full-cycle'
        type: choice
        options:
          - full-cycle
          - security-cycle
          - performance-cycle
          - deployment-cycle
          - continuous-loop
      environment:
        description: 'Target environment'
        required: false
        default: 'staging'
        type: choice
        options:
          - development
          - staging
          - production
  # Scheduled triggers
  schedule:
    # Run every 6 hours for continuous monitoring
    - cron: '0 */6 * * *'
    # Run security cycle daily at 2 AM
    - cron: '0 2 * * *'
    # Run performance cycle daily at 6 AM
    - cron: '0 6 * * *'
    # Run deployment cycle daily at 10 AM
    - cron: '0 10 * * *'
  # Repository events
  repository_dispatch:
    types: [workflow-trigger]
  # Workflow completion events
  workflow_run:
    workflows:
      - "CI/CD Pipeline"
      - "Security Workflow"
      - "Performance Testing"
      - "Deployment Workflow"
    types:
      - completed
      - failed

env:
  NODE_VERSION: '18'
  WORKFLOW_TIMEOUT: '3600' # 1 hour timeout

jobs:
  # Workflow Orchestration
  orchestrate:
    name: ðŸ”„ Orchestrate Workflows
    runs-on: ubuntu-latest
    outputs:
      workflow-status: ${{ steps.orchestrate.outputs.status }}
      next-workflow: ${{ steps.orchestrate.outputs.next }}
      cycle-count: ${{ steps.orchestrate.outputs.cycle }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Orchestrate workflow execution
        id: orchestrate
        run: |
          echo "ðŸ”„ Starting workflow orchestration..."
          
          # Determine trigger type and next workflow
          TRIGGER_TYPE="${{ github.event.inputs.trigger_type || 'full-cycle' }}"
          ENVIRONMENT="${{ github.event.inputs.environment || 'staging' }}"
          
          echo "Trigger type: $TRIGGER_TYPE"
          echo "Environment: $ENVIRONMENT"
          
          # Get current cycle count from workflow run
          CYCLE_COUNT=1
          if [ "${{ github.event.workflow_run.conclusion }}" == "completed" ]; then
            CYCLE_COUNT=$((CYCLE_COUNT + 1))
          fi
          
          # Determine next workflow based on trigger type
          case $TRIGGER_TYPE in
            "full-cycle")
              NEXT_WORKFLOW="ci-cd"
              echo "ðŸ”„ Full cycle triggered - running complete CI/CD pipeline"
              ;;
            "security-cycle")
              NEXT_WORKFLOW="security"
              echo "ðŸ”’ Security cycle triggered - running security workflow"
              ;;
            "performance-cycle")
              NEXT_WORKFLOW="performance"
              echo "âš¡ Performance cycle triggered - running performance tests"
              ;;
            "deployment-cycle")
              NEXT_WORKFLOW="deploy"
              echo "ðŸš€ Deployment cycle triggered - running deployment workflow"
              ;;
            "continuous-loop")
              NEXT_WORKFLOW="continuous-integration"
              echo "ðŸ”„ Continuous loop triggered - starting continuous integration"
              ;;
            *)
              NEXT_WORKFLOW="ci-cd"
              echo "ðŸ”„ Default cycle - running CI/CD pipeline"
              ;;
          esac
          
          # Set outputs
          echo "next=$NEXT_WORKFLOW" >> $GITHUB_OUTPUT
          echo "cycle=$CYCLE_COUNT" >> $GITHUB_OUTPUT
          echo "status=orchestrated" >> $GITHUB_OUTPUT
          
          echo "âœ… Orchestration complete"
          echo "Next workflow: $NEXT_WORKFLOW"
          echo "Cycle count: $CYCLE_COUNT"

  # Trigger CI/CD Pipeline
  trigger-cicd:
    name: ðŸš€ Trigger CI/CD Pipeline
    runs-on: ubuntu-latest
    needs: orchestrate
    if: needs.orchestrate.outputs.next-workflow == 'ci-cd'
    steps:
      - name: Trigger CI/CD Pipeline
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'ci-cd.yml',
              ref: context.ref,
              inputs: {
                environment: '${{ github.event.inputs.environment || 'staging' }}',
                cycle: '${{ needs.orchestrate.outputs.cycle-count }}'
              }
            });
            console.log('âœ… CI/CD Pipeline triggered');
            console.log('Workflow run ID:', runs.id);

  # Trigger Security Workflow
  trigger-security:
    name: ðŸ”’ Trigger Security Workflow
    runs-on: ubuntu-latest
    needs: orchestrate
    if: needs.orchestrate.outputs.next-workflow == 'security'
    steps:
      - name: Trigger Security Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'security.yml',
              ref: context.ref,
              inputs: {
                cycle: '${{ needs.orchestrate.outputs.cycle-count }}'
              }
            });
            console.log('âœ… Security Workflow triggered');
            console.log('Workflow run ID:', runs.id);

  # Trigger Performance Workflow
  trigger-performance:
    name: âš¡ Trigger Performance Workflow
    runs-on: ubuntu-latest
    needs: orchestrate
    if: needs.orchestrate.outputs.next-workflow == 'performance'
    steps:
      - name: Trigger Performance Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'performance.yml',
              ref: context.ref,
              inputs: {
                cycle: '${{ needs.orchestrate.outputs.cycle-count }}'
              }
            });
            console.log('âœ… Performance Workflow triggered');
            console.log('Workflow run ID:', runs.id);

  # Trigger Deployment Workflow
  trigger-deployment:
    name: ðŸš€ Trigger Deployment Workflow
    runs-on: ubuntu-latest
    needs: orchestrate
    if: needs.orchestrate.outputs.next-workflow == 'deploy'
    steps:
      - name: Trigger Deployment Workflow
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'deploy.yml',
              ref: context.ref,
              inputs: {
                environment: '${{ github.event.inputs.environment || 'staging' }}',
                cycle: '${{ needs.orchestrate.outputs.cycle-count }}'
              }
            });
            console.log('âœ… Deployment Workflow triggered');
            console.log('Workflow run ID:', runs.id);

  # Trigger Continuous Integration Loop
  trigger-continuous:
    name: ðŸ”„ Trigger Continuous Integration Loop
    runs-on: ubuntu-latest
    needs: orchestrate
    if: needs.orchestrate.outputs.next-workflow == 'continuous-integration'
    steps:
      - name: Trigger Continuous Integration Loop
        uses: actions/github-script@v7
        with:
          script: |
            const { data: runs } = await github.rest.actions.createWorkflowDispatch({
              owner: context.repo.owner,
              repo: context.repo.repo,
              workflow_id: 'continuous-integration-loop.yml',
              ref: context.ref,
              inputs: {
                environment: '${{ github.event.inputs.environment || 'staging' }}',
                cycle: '${{ needs.orchestrate.outputs.cycle-count }}',
                continuous: 'true'
              }
            });
            console.log('âœ… Continuous Integration Loop triggered');
            console.log('Workflow run ID:', runs.id);

  # Workflow Status Report
  status-report:
    name: ðŸ“Š Workflow Status Report
    runs-on: ubuntu-latest
    needs: [orchestrate, trigger-cicd, trigger-security, trigger-performance, trigger-deployment, trigger-continuous]
    if: always()
    steps:
      - name: Generate status report
        run: |
          echo "## ðŸ”„ Workflow Orchestration Report" >> $GITHUB_STEP_SUMMARY
          echo "**Orchestration Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Trigger Type:** ${{ github.event.inputs.trigger_type || 'full-cycle' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Environment:** ${{ github.event.inputs.environment || 'staging' }}" >> $GITHUB_STEP_SUMMARY
          echo "**Cycle Count:** ${{ needs.orchestrate.outputs.cycle-count }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ðŸš€ Triggered Workflows:" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.trigger-cicd.result }}" == "success" ]; then
            echo "âœ… CI/CD Pipeline triggered" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.trigger-security.result }}" == "success" ]; then
            echo "âœ… Security Workflow triggered" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.trigger-performance.result }}" == "success" ]; then
            echo "âœ… Performance Workflow triggered" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.trigger-deployment.result }}" == "success" ]; then
            echo "âœ… Deployment Workflow triggered" >> $GITHUB_STEP_SUMMARY
          fi
          if [ "${{ needs.trigger-continuous.result }}" == "success" ]; then
            echo "âœ… Continuous Integration Loop triggered" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### ðŸ”„ Next Steps:" >> $GITHUB_STEP_SUMMARY
          echo "1. Monitor triggered workflows in Actions tab" >> $GITHUB_STEP_SUMMARY
          echo "2. Check workflow execution status" >> $GITHUB_STEP_SUMMARY
          echo "3. Review any failures or warnings" >> $GITHUB_STEP_SUMMARY
          echo "4. Setup next orchestration cycle if needed" >> $GITHUB_STEP_SUMMARY

      - name: Notify orchestration completion
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            ðŸ”„ Workflow Orchestration ${{ job.status == 'success' && 'completed' || 'failed' }}!
            Type: ${{ github.event.inputs.trigger_type || 'full-cycle' }}
            Environment: ${{ github.event.inputs.environment || 'staging' }}
            Cycle: ${{ needs.orchestrate.outputs.cycle-count }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
