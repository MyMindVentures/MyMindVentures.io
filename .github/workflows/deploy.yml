name: üöÄ Deployment Workflow

on:
  push:
    branches: [ main, develop ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy to'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  NODE_VERSION: '18'

jobs:
  # Pre-deployment Checks
  pre-deployment:
    name: ‚úÖ Pre-deployment Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm run test:all

      - name: Run security tests
        run: npm run test:security

      - name: Run PWA tests
        run: npm run test:pwa

      - name: Build application
        run: npm run build

      - name: Validate build output
        run: |
          if [ ! -d "dist" ]; then
            echo "‚ùå Build output directory 'dist' not found"
            exit 1
          fi
          
          if [ ! -f "dist/index.html" ]; then
            echo "‚ùå Build output file 'dist/index.html' not found"
            exit 1
          fi
          
          echo "‚úÖ Build validation passed"

      - name: Check bundle size
        run: |
          TOTAL_SIZE=$(du -sh dist | cut -f1)
          echo "üì¶ Total bundle size: ${TOTAL_SIZE}"
          
          # Warn if bundle is too large
          BUNDLE_SIZE_KB=$(du -sk dist | cut -f1)
          if [ "$BUNDLE_SIZE_KB" -gt 5000 ]; then
            echo "‚ö†Ô∏è  Bundle size is large (${TOTAL_SIZE}). Consider optimization."
          else
            echo "‚úÖ Bundle size is acceptable"
          fi

  # Deploy to Staging
  deploy-staging:
    name: üöÄ Deploy to Staging
    runs-on: ubuntu-latest
    needs: pre-deployment
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for staging
        run: npm run build
        env:
          NODE_ENV: staging
          REACT_APP_ENV: staging
          REACT_APP_API_URL: ${{ secrets.STAGING_API_URL }}
          REACT_APP_SUPABASE_URL: ${{ secrets.STAGING_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.STAGING_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel (Staging)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Wait for deployment
        run: sleep 30

      - name: Run staging smoke tests
        run: |
          npm run cypress:run:headless -- --config baseUrl=${{ steps.deploy.outputs.preview-url }}
        env:
          CI: true

      - name: Health check staging
        run: |
          STAGING_URL=${{ steps.deploy.outputs.preview-url }}
          
          # Wait for deployment to be ready
          for i in {1..10}; do
            if curl -f "$STAGING_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Staging deployment is healthy"
              break
            fi
            echo "‚è≥ Waiting for staging deployment... (attempt $i/10)"
            sleep 10
          done
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Staging deployment health check failed"
            exit 1
          fi

      - name: Notify staging deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            üöÄ Staging deployment ${{ job.status == 'success' && 'successful' || 'failed' }}!
            Environment: Staging
            URL: ${{ steps.deploy.outputs.preview-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Deploy to Production
  deploy-production:
    name: üöÄ Deploy to Production
    runs-on: ubuntu-latest
    needs: [pre-deployment, deploy-staging]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production
          REACT_APP_ENV: production
          REACT_APP_API_URL: ${{ secrets.PRODUCTION_API_URL }}
          REACT_APP_SUPABASE_URL: ${{ secrets.PRODUCTION_SUPABASE_URL }}
          REACT_APP_SUPABASE_ANON_KEY: ${{ secrets.PRODUCTION_SUPABASE_ANON_KEY }}

      - name: Deploy to Vercel (Production)
        id: deploy
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Wait for deployment
        run: sleep 30

      - name: Run production smoke tests
        run: |
          npm run cypress:run:headless -- --config baseUrl=${{ steps.deploy.outputs.preview-url }}
        env:
          CI: true

      - name: Health check production
        run: |
          PRODUCTION_URL=${{ steps.deploy.outputs.preview-url }}
          
          # Wait for deployment to be ready
          for i in {1..10}; do
            if curl -f "$PRODUCTION_URL/health" > /dev/null 2>&1; then
              echo "‚úÖ Production deployment is healthy"
              break
            fi
            echo "‚è≥ Waiting for production deployment... (attempt $i/10)"
            sleep 10
          done
          
          if [ $i -eq 10 ]; then
            echo "‚ùå Production deployment health check failed"
            exit 1
          fi

      - name: Run performance tests
        run: |
          npm install -g lighthouse
          
          # Quick performance check
          lighthouse ${{ steps.deploy.outputs.preview-url }} --output=json --output-path=./production-lighthouse.json --only-categories=performance
          
          # Check performance score
          SCORE=$(node -e "console.log(JSON.parse(require('fs').readFileSync('./production-lighthouse.json')).categories.performance.score * 100)")
          echo "üìä Production Performance Score: ${SCORE}%"
          
          if (( $(echo "$SCORE < 70" | bc -l) )); then
            echo "‚ö†Ô∏è  Performance score is below 70%. Consider optimization."
          else
            echo "‚úÖ Performance score is acceptable"
          fi

      - name: Notify production deployment
        uses: 8398a7/action-slack@v3
        if: always()
        with:
          status: ${{ job.status }}
          text: |
            üöÄ Production deployment ${{ job.status == 'success' && 'successful' || 'failed' }}!
            Environment: Production
            URL: ${{ steps.deploy.outputs.preview-url }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

  # Post-deployment Monitoring
  post-deployment:
    name: üìä Post-deployment Monitoring
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate deployment report
        run: |
          echo "## üöÄ Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "**Deployment Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "**Branch:** ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### ‚úÖ Pre-deployment Checks" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.pre-deployment.result }}" == "success" ]; then
            echo "‚úÖ All pre-deployment checks passed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Pre-deployment checks failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üöÄ Staging Deployment" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
            echo "‚úÖ Staging deployment successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-staging.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è  Staging deployment skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Staging deployment failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üöÄ Production Deployment" >> $GITHUB_STEP_SUMMARY
          if [ "${{ needs.deploy-production.result }}" == "success" ]; then
            echo "‚úÖ Production deployment successful" >> $GITHUB_STEP_SUMMARY
          elif [ "${{ needs.deploy-production.result }}" == "skipped" ]; then
            echo "‚è≠Ô∏è  Production deployment skipped" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Production deployment failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Monitor deployment health
        run: |
          echo "## üíö Deployment Health Monitoring" >> $GITHUB_STEP_SUMMARY
          echo "Monitoring deployment health for the next 5 minutes..." >> $GITHUB_STEP_SUMMARY
          
          # This would typically check monitoring services like Sentry, Posthog, etc.
          echo "‚úÖ Deployment monitoring active" >> $GITHUB_STEP_SUMMARY

      - name: Final deployment status
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "üéâ Deployment workflow completed successfully!"
          else
            echo "‚ùå Deployment workflow encountered issues. Please review the logs."
          fi
