name: üîí Security Workflow

on:
  schedule:
    # Run daily at 2 AM UTC
    - cron: '0 2 * * *'
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  NODE_VERSION: '18'

jobs:
  # Dependency Vulnerability Scan
  dependency-scan:
    name: üì¶ Dependency Vulnerability Scan
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run npm audit
        run: npm audit --audit-level=moderate --json > npm-audit.json || true

      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high --json-file-output=snyk-results.json

      - name: Run OWASP dependency check
        uses: dependency-check/Dependency-Check_Action@main
        with:
          projectName: 'MyMindVentures.io'
          scanPath: '.'
          format: 'HTML'
          out: 'reports'
          args: >
            --failOnCVSS 7
            --enableRetired

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        with:
          name: security-scan-results
          path: |
            npm-audit.json
            snyk-results.json
            reports/

  # Code Security Analysis
  code-security:
    name: üîç Code Security Analysis
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint security rules
        run: npm run lint -- --max-warnings 0

      - name: Run TypeScript security check
        run: npx tsc --noEmit --strict

      - name: Run Bandit security linter
        run: |
          pip install bandit
          bandit -r src/ -f json -o bandit-results.json || true

      - name: Run Semgrep security scan
        uses: returntocorp/semgrep-action@v1
        with:
          config: >-
            p/security-audit
            p/secrets
            p/owasp-top-ten
          output-format: json
          output-file: semgrep-results.json

      - name: Upload code security results
        uses: actions/upload-artifact@v4
        with:
          name: code-security-results
          path: |
            bandit-results.json
            semgrep-results.json

  # Container Security Scan
  container-security:
    name: üê≥ Container Security Scan
    runs-on: ubuntu-latest
    needs: dependency-scan
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run Hadolint for Dockerfile
        run: |
          docker run --rm -i hadolint/hadolint < Dockerfile || true

  # Runtime Security Testing
  runtime-security:
    name: üöÄ Runtime Security Testing
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Start server
        run: npm run preview &
        env:
          CI: true

      - name: Wait for server
        run: sleep 10

      - name: Run OWASP ZAP security scan
        uses: zaproxy/action-full-scan@v0.8.0
        with:
          target: 'http://localhost:3000'
          rules_file_name: '.zap/rules.tsv'
          cmd_options: '-a'

      - name: Run security tests
        run: npm run test:security

      - name: Upload runtime security results
        uses: actions/upload-artifact@v4
        with:
          name: runtime-security-results
          path: |
            .zap/
            coverage/

  # Security Report Generation
  security-report:
    name: üìä Security Report
    runs-on: ubuntu-latest
    needs: [dependency-scan, code-security, container-security, runtime-security]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all security artifacts
        uses: actions/download-artifact@v4
        with:
          path: security-artifacts/

      - name: Generate security summary
        run: |
          echo "## üîí Security Scan Summary" >> $GITHUB_STEP_SUMMARY
          echo "**Scan Date:** $(date)" >> $GITHUB_STEP_SUMMARY
          echo "**Repository:** ${{ github.repository }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          
          echo "### üì¶ Dependency Vulnerabilities" >> $GITHUB_STEP_SUMMARY
          if [ -f "security-artifacts/security-scan-results/npm-audit.json" ]; then
            echo "‚úÖ npm audit completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå npm audit failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üîç Code Security Issues" >> $GITHUB_STEP_SUMMARY
          if [ -f "security-artifacts/code-security-results/semgrep-results.json" ]; then
            echo "‚úÖ Semgrep scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå Semgrep scan failed" >> $GITHUB_STEP_SUMMARY
          fi
          
          echo "### üê≥ Container Security" >> $GITHUB_STEP_SUMMARY
          echo "‚úÖ Trivy scan completed" >> $GITHUB_STEP_SUMMARY
          
          echo "### üöÄ Runtime Security" >> $GITHUB_STEP_SUMMARY
          if [ -f "security-artifacts/runtime-security-results/.zap/report.html" ]; then
            echo "‚úÖ OWASP ZAP scan completed" >> $GITHUB_STEP_SUMMARY
          else
            echo "‚ùå OWASP ZAP scan failed" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Create security badge
        run: |
          # Create security badge based on scan results
          if [ "${{ job.status }}" == "success" ]; then
            echo "üü¢ Security scan passed"
          else
            echo "üî¥ Security scan failed"
          fi

      - name: Notify security issues
        uses: 8398a7/action-slack@v3
        if: failure()
        with:
          status: failure
          text: 'üö® Security vulnerabilities detected! Please review the scan results.'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
